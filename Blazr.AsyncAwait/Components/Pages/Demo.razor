@page "/"
@using System.Runtime.CompilerServices
@implements IHandleEvent

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div class="mb-3">
    <button class="btn btn-primary" @onclick="Clicked">Standard Click</button>
</div>

<div class="bg-dark text-white m-2 p-2">
    <pre>
        @_log.ToString()
    </pre>
</div>

@code {
    private System.Text.StringBuilder _log = new();
    private string? _message;
    private SynchronizationContext? _sc = SynchronizationContext.Current;

    private Task Clicked( MouseEventArgs e )
    {
        var stateMachine = new Clicked_StateMachine(this);
        stateMachine.MoveNext();
        return stateMachine.MachineTask;

        // _log.AppendLine($"Standard Processing at {DateTime.Now.ToLongTimeString()}");
        // _message = await GetMessageAsync();
        // _log.AppendLine($"Completed Processing at {DateTime.Now.ToLongTimeString()}");
    }

    private Task<string> GetMessageAsync()
    {
        var stateMachine = new GetMessageAsync_StateMachine(this);
        stateMachine.MoveNext();
        return stateMachine.MachineTask;

        // _log.AppendLine($"Standard Processing at {DateTime.Now.ToLongTimeString()}");
        // await Task.Yield();
        // _log.AppendLine($"Completed Processing at {DateTime.Now.ToLongTimeString()}");
        // return $"Processed at {DateTime.Now.ToLongTimeString()}";

    }

    /// <summary>
    /// Implements the UI event handler and overides the existing handler in ComponentBase
    /// </summary>
    /// <param name="item"></param>
    /// <param name="arg"></param>
    /// <returns></returns>
    Task IHandleEvent.HandleEventAsync(EventCallbackWorkItem item, object? arg)
    {
        var stateMachine = new HandleEventAsync_StateMachine(this, item, arg);
        stateMachine.MoveNext();
        return stateMachine.MachineTask;

            // var uiTask = item.InvokeAsync(arg);

            // if (!uiTask.IsCompleted)
            // {
            //     this.StateHasChanged();
            //     await uiTask;
            // }

            // this.StateHasChanged();
    }

    /// <summary>
    /// The State Machine for the Clicked Event
    /// </summary>
    class HandleEventAsync_StateMachine
    {
        private readonly Demo _parent;
        private EventCallbackWorkItem _eventCallbackWorkItem;
        private object? _eventCallbackWorkItemArgs;

        private readonly TaskCompletionSource _taskManager = new();
        private int _state = 0;

        // Tasks for each step
        private TaskAwaiter _state_0_Awaiter = default!;

        public Task MachineTask => _taskManager.Task;

        public HandleEventAsync_StateMachine(Demo parent, EventCallbackWorkItem item, object? args)
        {
            _parent = parent;
            _eventCallbackWorkItem = item;
            _eventCallbackWorkItemArgs = args;

        }

        public void MoveNext()
        {
            try
            {
                if (_state == 0)
                {
                    _parent._log.AppendLine($"{this.GetType().Name}[{_state}] Processing [{Thread.CurrentThread.ManagedThreadId}] at {DateTime.Now.ToLongTimeString()}");
                    _state_0_Awaiter = _eventCallbackWorkItem.InvokeAsync(_eventCallbackWorkItemArgs).GetAwaiter();

                    _state = 1;

                    if (!_state_0_Awaiter.IsCompleted)
                    {
                        _parent.InvokeAsync(_parent.StateHasChanged);
                        _state_0_Awaiter.OnCompleted(MoveNext);
                        return;
                    }
                }

                if (_state == 1)
                {
                    _parent._log.AppendLine($"{this.GetType().Name}[{_state}] Processing [{Thread.CurrentThread.ManagedThreadId}] at {DateTime.Now.ToLongTimeString()}");
                    _parent.InvokeAsync(_parent.StateHasChanged);
                }

                _taskManager.SetResult();

            }
            catch (Exception e)
            {
                _taskManager.SetException(e);
            }
        }
    }


    /// <summary>
    /// The State Machine for the Clicked Event
    /// </summary>
    class Clicked_StateMachine
    {
        private readonly Demo _parent;

        private readonly TaskCompletionSource _taskManager = new();
        private int _state = 0;

        private TaskAwaiter<string> _state_0_Awaiter = default!;

        public Task MachineTask => _taskManager.Task;

        public Clicked_StateMachine(Demo parent)
        {
            _parent = parent;
        }

        public void MoveNext()
        {
            try
            {
                if (_state == 0)
                {
                    _parent._log.AppendLine($"{this.GetType().Name}[{_state}] Processing [{Thread.CurrentThread.ManagedThreadId}] at {DateTime.Now.ToLongTimeString()}");
                    _state_0_Awaiter = _parent.GetMessageAsync().GetAwaiter();
                    _state = 1;

                    if (!_state_0_Awaiter.IsCompleted)
                    {
                        _state_0_Awaiter.OnCompleted(MoveNext);
                        return;
                    }
                }

                if (_state == 1)
                {
                    _parent._message = _state_0_Awaiter.GetResult();
                    _parent._log.AppendLine($"{this.GetType().Name}[{_state}] Processing [{Thread.CurrentThread.ManagedThreadId}] at {DateTime.Now.ToLongTimeString()}");
                }

                _taskManager.SetResult();

            }
            // Something went wrong.  Pass the error to the caller through the completion task
            catch (Exception e)
            {
                _taskManager.SetException(e);
            }
        }
    }

    /// <summary>
    /// The State Machine for the Clicked Event
    /// </summary>
    class GetMessageAsync_StateMachine
    {
        private readonly Demo _parent;

        private readonly TaskCompletionSource<string> _taskManager = new();
        private int _state = 0;

        private TaskAwaiter _state_0_Awaiter = default!;

        public Task<string> MachineTask => _taskManager.Task;

        public GetMessageAsync_StateMachine(Demo parent)
        {
            _parent = parent;
        }

        public void MoveNext()
        {
            try
            {
                if (_state == 0)
                {
                    _parent._log.AppendLine($"{this.GetType().Name}[{_state}] Processing [{Thread.CurrentThread.ManagedThreadId}] at {DateTime.Now.ToLongTimeString()}");
                    _state_0_Awaiter = Task.Delay(1000).GetAwaiter();
                    _state = 1;

                    if (!_state_0_Awaiter.IsCompleted)
                    {
                        _state_0_Awaiter.OnCompleted(MoveNext);
                        return;
                    }
                }

                if (_state == 1)
                {
                    _parent._log.AppendLine($"{this.GetType().Name}[{_state}] Processing [{Thread.CurrentThread.ManagedThreadId}] at {DateTime.Now.ToLongTimeString()}");
                }

                _taskManager.SetResult($"Processed at {DateTime.Now.ToLongTimeString()}");

            }
            // Something went wrong.  Pass the error to the caller through the completion task
            catch (Exception e)
            {
                _taskManager.SetException(e);
            }
        }
    }
}
