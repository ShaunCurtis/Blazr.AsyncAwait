@page "/"

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div class="mb-3">
    <button class="btn btn-primary" @onclick="Clicked">Standard Click</button>
    <button class="btn btn-primary" @onclick="_Clicked">Custom Delay Click</button>
    <button class="btn btn-primary" @onclick="__Clicked">Custom Yield Click</button>
</div>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="___Clicked">Async State Machine Click</button>
    <button class="btn btn-danger" @onclick="____Clicked">Sync State Machine Click</button>
</div>

<div class="bg-dark text-white m-2 p-2">
    <pre>
        @_log.ToString()
    </pre>
</div>

@code {
    private System.Text.StringBuilder _log = new();

    /// <summary>
    /// Standard Clicked event with am intermediate update to demonstrate UI responsiveness
    /// </summary>
    /// <returns></returns>
    private async Task Clicked()
    {
        _log.AppendLine($"Standard Processing at {DateTime.Now.ToLongTimeString()}");
        await TaskHelper.DoSomethingAsync();
        _log.AppendLine($"Completed Processing at {DateTime.Now.ToLongTimeString()}");
    }

    /// <summary>
    /// Method that uses the custom BlazrTask.Delay
    /// </summary>
    /// <returns></returns>
    private async Task _Clicked()
    {
        _log.AppendLine($"Custom Delay Processing at {DateTime.Now.ToLongTimeString()}");
        await BlazrTask.Delay(1000);
        _log.AppendLine($"Completed Processing at {DateTime.Now.ToLongTimeString()}");
    }

    /// <summary>
    /// Method that calls the custom BlazrTask Yield and demonstrates that it is yielding prior to
    ///  a section of blocking code - PretendToDoSomethingAsync
    /// </summary>
    /// <returns></returns>
    private async Task __Clicked()
    {
        _log.AppendLine($"Custom Yield Processing at {DateTime.Now.ToLongTimeString()}");
        await BlazrTask.Yield();
        await TaskHelper.PretendToDoSomethingAsync();
        _log.AppendLine($"Completed Processing at {DateTime.Now.ToLongTimeString()}");
    }

    /// <summary>
    /// Method that shifts the async behaviour into Clicked_StateMachine
    /// </summary>
    /// <returns></returns>
    private Task ___Clicked()
    {
        var stateMachine = new Clicked_StateMachine(this);
        stateMachine.Execute();
        return stateMachine.Task;
    }

    /// <summary>
    /// Method that shifts the async behaviour into Clicked_StateMachine1
    /// </summary>
    /// <returns></returns>
    private Task ____Clicked()
    {
        var stateMachine = new Clicked_StateMachine1(this);
        stateMachine.Execute();
        return stateMachine.Task;
    }

    /// <summary>
    /// The State Machine for the Clicked Event
    /// </summary>
    class Clicked_StateMachine
    {
        private readonly Home _parent;

        private readonly TaskCompletionSource _taskManager = new();
        private int _state = 0;

        // Tasks for each step
        private Task _state1_Task = Task.CompletedTask;

        public Task Task => _taskManager.Task;

        public Clicked_StateMachine(Home parent)
        {
            _parent = parent;
        }

        public void Execute()
        {
            try
            {
                // Step 0 - The intial step to the first await
                if (_state == 0)
                {
                    // The code from the start of the method to the first 'await'.
                    {
                        _parent._log.AppendLine($"State Machine Processing at {DateTime.Now.ToLongTimeString()}");
                    }

                    // Start the await Task
                    _state1_Task = TaskHelper.DoSomethingAsync();

                    // Update state
                    _state = 1;

                    // Check the task status
                    // If:
                    //  1. Is still running - Schedules a contunation that calls this method
                    //  2. Is Cancelled or Is Faulted - sets the appropraite state on _taskManager 
                    // Returns if any of the above is true
                    if (this.ReturnOnTaskStatus(_state1_Task))
                        return;

                    // We're here because _doSomethingAsync_Task ran synchronously without a yield
                    // We just fall thro to the next step, there's no point in doing all the extra work scheduling a continuation
                }

                // Step 1 - the first await block
                if (_state == 1)
                {
                    // Handle exception or cancellation task states
                    if (this.HandleTaskErrorOrCancellation(_state1_Task))
                        return;

                    // The code following the first 'await' to the next await or the end.
                    {
                        _parent._log.AppendLine($"State Machine Processing completed at {DateTime.Now.ToLongTimeString()}");
                    }

                    //No more await tasks so fall thro to bottom
                }

                // No more steps, job done.  Set the Task to complete and finish.
                _taskManager.SetResult();

            }
            // Something went wrong.  Pass the error to the caller through the completion task
            catch (Exception e)
            {
                _taskManager.SetException(e);
            }
        }

        private bool ReturnOnTaskStatus(Task task)
        {
            // The task is complete so nothing to do 
            if (task.IsCompleted)
                return false;

            // The task is still running
            // schedule a continuation to call Continue on the state machine on the completion of task
            // and return true to tell the caller to return
            if (!task.IsCompleted)
            {
                task.ContinueWith(_ => Execute());
                return true;
            }

            return HandleTaskErrorOrCancellation(task);
        }

        private bool HandleTaskErrorOrCancellation(Task task)
        {

            // If the task was cancelled then set _taskManager to canceled and return
            if (task.Status == TaskStatus.Canceled)
            {
                _taskManager.SetCanceled();
                return true;
            }

            // If the task was faulted then set the exception in _taskManager and return
            if (task.Status == TaskStatus.Faulted)
            {
                _taskManager.SetException(task.Exception?.InnerException ?? new Exception("Task just self destructed with no suicide note!"));
                return true;
            }

            return false;
        }
    }

    /// <summary>
    /// The State Machine for the Clicked Event
    /// </summary>
    class Clicked_StateMachine1
    {
        private readonly Home _parent;

        private readonly TaskCompletionSource _taskManager = new();
        private int _state = 0;

        // Tasks for each step
        private Task _state1_Task = Task.CompletedTask;

        public Task Task => _taskManager.Task;

        public Clicked_StateMachine1(Home parent)
        {
            _parent = parent;
        }

        public void Execute()
        {
            try
            {
                // Step 0 - The intial step to the first await
                if (_state == 0)
                {
                    // The code from the start of the method to the first 'await'.
                    {
                        _parent._log.AppendLine($"State Machine Processing at {DateTime.Now.ToLongTimeString()}");
                    }

                    // Start the await Task
                    _state1_Task = TaskHelper.PretendToDoSomethingAsync();

                    // Update state
                    _state = 1;

                    // Check the task status
                    // If:
                    //  1. Is still running - Schedules a contunation that calls this method
                    //  2. Is Cancelled or Is Faulted - sets the appropraite state on _taskManager
                    // Returns if any of the above is true
                    if (this.ReturnOnTaskStatus(_state1_Task))
                        return;

                    // We're here because _doSomethingAsync_Task ran synchronously without a yield
                    // We just fall thro to the next step, there's no point in doing all the extra work scheduling a continuation
                }

                // Step 1 - the first await block
                if (_state == 1)
                {
                    // Handle exception or cancellation task states
                    if (this.HandleTaskErrorOrCancellation(_state1_Task))
                        return;

                    // The code following the first 'await' to the next await or the end.
                    {
                        _parent._log.AppendLine($"State Machine Processing completed at {DateTime.Now.ToLongTimeString()}");
                    }

                    //No more await tasks so fall thro to bottom
                }

                // No more steps, job done.  Set the Task to complete and finish.
                _taskManager.SetResult();

            }
            // Something went wrong.  Pass the error to the caller through the completion task
            catch (Exception e)
            {
                _taskManager.SetException(e);
            }
        }

        private bool ReturnOnTaskStatus(Task task)
        {
            // The task is complete so nothing to do
            if (task.IsCompleted)
                return false;

            // The task is still running
            // schedule a continuation to call Continue on the state machine on the completion of task
            // and return true to tell the caller to return
            if (!task.IsCompleted)
            {
                task.ContinueWith(_ => Execute());
                return true;
            }

            return HandleTaskErrorOrCancellation(task);
        }

        private bool HandleTaskErrorOrCancellation(Task task)
        {

            // If the task was cancelled then set _taskManager to canceled and return
            if (task.Status == TaskStatus.Canceled)
            {
                _taskManager.SetCanceled();
                return true;
            }

            // If the task was faulted then set the exception in _taskManager and return
            if (task.Status == TaskStatus.Faulted)
            {
                _taskManager.SetException(task.Exception?.InnerException ?? new Exception("Task just self destructed with no suicide note!"));
                return true;
            }

            return false;
        }
    }
}
