@page "/delay"
@implements IHandleEvent
@using System.Text
@using System.Runtime.CompilerServices
<h3>YieldDemo</h3>

<div class="mb-2">
    <button class="btn btn-primary" @onclick="this.StandardHandler">Standard Handler</button>
    <button class="btn btn-primary" @onclick="this.StandardYield">Standard Yield</button>
    <button class="btn btn-primary" @onclick="this.AlternativeStandardYield">Alternative Standard Yield</button>
</div>

<div class="mb-2">
</div>


<div class="mb-2">
</div>

<button class="btn btn-primary" @onclick="this.NormalDelay">Normal Delay</button>
<button class="btn btn-primary" @onclick="this.ASMContinuationDelay">ATM Continuation Delay</button>
<button class="btn btn-primary" @onclick="this.ContinuationDelay">Continuation Delay</button>
<button class="btn btn-primary" @onclick="this.SMYield">Yield</button>

<div class="bg-dark text-white p-2 m-2">
    <pre>
        @_sb.ToString()
    </pre>
</div>
@code {
    private StringBuilder _sb = new();

    #region Normal Handlers

    private async Task StandardHandler()
    {
        _sb.AppendLine("Step1");
        StateHasChanged();
        await Task.CompletedTask;
        Thread.Sleep(500);

        _sb.AppendLine("Step2");
        StateHasChanged();
        await Task.CompletedTask;
        Thread.Sleep(500);

        _sb.AppendLine("Step3");
        StateHasChanged();
        await Task.CompletedTask;
        Thread.Sleep(500);

        _sb.AppendLine("Complete");
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task StandardYield()
    {
        _sb.AppendLine("Step1");
        StateHasChanged();
        await Task.Yield();
        Thread.Sleep(500);

        _sb.AppendLine("Step2");
        StateHasChanged();
        await Task.Yield();
        Thread.Sleep(500);

        _sb.AppendLine("Step3");
        StateHasChanged();
        await Task.Yield();
        Thread.Sleep(500);

        _sb.AppendLine("Complete");
        StateHasChanged();
    }

    private YieldAwaitable Yield = Task.Yield();

    private async Task AlternativeStandardYield()
    {
        _sb.AppendLine("Step1");
        StateHasChanged();
        await Yield;
        Thread.Sleep(500);

        _sb.AppendLine("Step2");
        StateHasChanged();
        await Yield;
        Thread.Sleep(500);

        _sb.AppendLine("Step3");
        StateHasChanged();
        await Yield;
        Thread.Sleep(500);

        _sb.AppendLine("Complete");
        StateHasChanged();
    }

    #endregion

    //================================
    //Next Section
    //===============================

    private async Task NormalDelay()
    {
        _sb.AppendLine("Started");
        StateHasChanged();
        await Task.Delay(500);
        _sb.AppendLine("Complete");
        StateHasChanged();
    }

    private async Task ASMContinuationDelay()
    {
        _sb.AppendLine("Started");
        StateHasChanged();

        var task = Task.CompletedTask;

        await task.ContinueWith((awaitable) =>
        {
            Thread.Sleep(500);
            _sb.AppendLine("Complete");
        });

        StateHasChanged();
    }

    private Task ContinuationDelay()
    {
        _sb.AppendLine("Started");
        StateHasChanged();
        var _sc = SynchronizationContext.Current;

        var task = Task.CompletedTask;

        task.ContinueWith((awaitable) =>
        {
            _sc?.Post((state) =>
            {
                Thread.Sleep(500);
                _sb.AppendLine("Complete");
                StateHasChanged();
            }, null);
        });

        return task;
    }

    private Task SMYield()
    {
        var stateMachine = new StateMachine(this);
        stateMachine.MoveNext();
        return stateMachine.Task;
    }

    private class StateMachine
    {
        private YieldDemo _owner;
        private TaskCompletionSource _tcs;
        private int _state;

        public Task Task => _tcs.Task;

        public StateMachine(YieldDemo demo)
        {
            _owner = demo;
            _tcs = new();
            _state = 0;
        }

        public void MoveNext()
        {
            if (_state == 0)
            {
                _owner._sb.AppendLine("Started");
                _owner.StateHasChanged();
                _state++;
                var awaiter = Task.Delay(500).GetAwaiter();

                if (!awaiter.IsCompleted)
                {
                    awaiter.OnCompleted(MoveNext);
                    return;
                }
            }

            if (_state == 1)
            {
                _owner._sb.AppendLine("Complete");
                _owner.StateHasChanged();
            }

            _tcs.SetResult();
            return;
        }
    }

    // Overrides the ComponentBase handler
    // removing all the automatic calls to StateHasChanged
    Task IHandleEvent.HandleEventAsync(EventCallbackWorkItem item, object? arg)
        => item.InvokeAsync(arg);

}
